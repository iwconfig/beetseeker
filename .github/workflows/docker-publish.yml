name: Docker

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  # github.repository is <owner>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # Pinned Cosign version for reproducibility
  COSIGN_VERSION: v2.5.0 # Check for the latest stable release

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read      # To checkout the repository
      packages: write    # To push Docker images to GHCR
      id-token: write    # To use OIDC for keyless signing with Sigstore

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        run: |
          # Create and use a new builder instance
          docker buildx create --use
          # Ensure the builder is bootstrapped (ready to build)
          docker buildx inspect --bootstrap
          # List available builders (optional, for debugging)
          docker buildx ls
          echo "Successfully set up Docker Buildx"

      - name: Log in to ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request' # Don't log in for PRs if not pushing
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Generate Docker metadata (tags and labels)
        id: meta
        run: |
          IMAGE_ID="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          
          # Initialize empty lists for tags and labels
          declare -a TAG_ARGS_LIST=()
          declare -a LABEL_ARGS_LIST=()
          declare -a COSIGN_SIGN_TARGETS=()

          # Common OCI labels
          LABEL_ARGS_LIST+=("--label" "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}")
          LABEL_ARGS_LIST+=("--label" "org.opencontainers.image.created=$(date -u --rfc-3339=seconds)")
          LABEL_ARGS_LIST+=("--label" "org.opencontainers.image.revision=${{ github.sha }}")

          # --- Tagging Logic ---
          # For PRs, build with a unique PR tag but don't push (controlled later)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_BRANCH_NAME_SANITIZED=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9.-]/-/g')
            PR_TAG="${IMAGE_ID}:pr-${{ github.event.number }}-${PR_BRANCH_NAME_SANITIZED}-${{ github.sha }}"
            TAG_ARGS_LIST+=("--tag" "$PR_TAG")
            LABEL_ARGS_LIST+=("--label" "org.opencontainers.image.version=pr-${{ github.event.number }}")
          else # For push events (main branch or tags)
            # Tag with commit SHA
            SHA_TAG="${IMAGE_ID}:${{ github.sha }}"
            TAG_ARGS_LIST+=("--tag" "$SHA_TAG")
            COSIGN_SIGN_TARGETS+=("$SHA_TAG") # Add to list of images to sign if pushed

            if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref_name }}" == v*.*.* ]]; then
              # Git tag push (e.g., v1.2.3)
              VERSION_TAG="${IMAGE_ID}:${{ github.ref_name }}"
              TAG_ARGS_LIST+=("--tag" "$VERSION_TAG")
              COSIGN_SIGN_TARGETS+=("$VERSION_TAG")
              LABEL_ARGS_LIST+=("--label" "org.opencontainers.image.version=${{ github.ref_name }}")
              
              # Optional: add minor (vX.Y) and major (vX) tags
              MINOR_TAG="${IMAGE_ID}:$(echo "${{ github.ref_name }}" | cut -d. -f1,2)" # v1.2
              MAJOR_TAG="${IMAGE_ID}:$(echo "${{ github.ref_name }}" | cut -d. -f1)"   # v1
              TAG_ARGS_LIST+=("--tag" "$MINOR_TAG")
              COSIGN_SIGN_TARGETS+=("$MINOR_TAG")
              TAG_ARGS_LIST+=("--tag" "$MAJOR_TAG")
              COSIGN_SIGN_TARGETS+=("$MAJOR_TAG")

            elif [[ "${{ github.ref_name }}" == "main" ]]; then
              # Push to main branch
              LATEST_TAG="${IMAGE_ID}:latest"
              TAG_ARGS_LIST+=("--tag" "$LATEST_TAG")
              COSIGN_SIGN_TARGETS+=("$LATEST_TAG")
              LABEL_ARGS_LIST+=("--label" "org.opencontainers.image.version=latest-${{ github.sha }}")
            fi
          fi
          
          # Convert arrays to space-separated strings for output
          echo "tags_args_string=${TAG_ARGS_LIST[*]}" >> $GITHUB_OUTPUT
          echo "labels_args_string=${LABEL_ARGS_LIST[*]}" >> $GITHUB_OUTPUT
          echo "cosign_targets_string=${COSIGN_SIGN_TARGETS[*]}" >> $GITHUB_OUTPUT

          echo "::group::Generated Docker Metadata"
          echo "Tags args: ${TAG_ARGS_LIST[*]}"
          echo "Labels args: ${LABEL_ARGS_LIST[*]}"
          echo "Cosign targets: ${COSIGN_SIGN_TARGETS[*]}"
          echo "::endgroup::"

      - name: Build and push Docker image
        id: build-and-push
        run: |
          METADATA_FILE="buildx-metadata.json"
          PUSH_FLAG=""
          # Only push if not a pull request
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            PUSH_FLAG="--push"
          fi

          # Check if there are any tags to apply
          if [[ -z "${{ steps.meta.outputs.tags_args_string }}" ]]; then
            echo "No tags generated. Skipping build."
            # Set empty digest if skipping
            echo "digest=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # The --provenance default changed in buildx v0.10. For consistency with typical usage of the original
          # action (which might not have generated attestations by default for all users),
          # explicitly set it. Modern best practice is `true` or `mode=max`.
          # Set to `false` if you don't want SLSA attestations.
          # Set to `true` or `mode=max` if you do (recommended for supply chain security).
          # For this example, let's set it to false to avoid generating extra artifacts unless intended.
          docker buildx build . \
            --file ./Dockerfile \
            ${{ steps.meta.outputs.labels_args_string }} \
            ${{ steps.meta.outputs.tags_args_string }} \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --metadata-file "$METADATA_FILE" \
            --provenance=false \
            $PUSH_FLAG
          
          # If pushed, extract digest. Otherwise, set empty.
          if [[ "$PUSH_FLAG" == "--push" ]]; then
            # The key in metadata.json for the main image digest is "containerimage.digest" with BuildKit >= v0.11.
            # For older versions or specific build patterns, it might differ.
            IMAGE_DIGEST=$(jq -r '."containerimage.digest"' "$METADATA_FILE")

            if [ -z "$IMAGE_DIGEST" ] || [ "$IMAGE_DIGEST" == "null" ]; then
              echo "Warning: 'containerimage.digest' not found in $METADATA_FILE."
              echo "Attempting to find any sha256 digest in the metadata..."
              # Fallback: try to find any string that looks like a sha256 digest. This is less reliable.
              IMAGE_DIGEST=$(jq -r '.. | select(type == "string" and test("^sha256:[a-f0-9]{64}$")) | first // empty' "$METADATA_FILE")
            fi

            if [ -z "$IMAGE_DIGEST" ] || [ "$IMAGE_DIGEST" == "null" ]; then
              echo "Error: Could not extract image digest from $METADATA_FILE"
              echo "--- Metadata File Content ---"
              cat "$METADATA_FILE"
              echo "--- End Metadata File Content ---"
              exit 1
            fi
            echo "Image digest: $IMAGE_DIGEST"
            echo "digest=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT
          else
            echo "Image not pushed (PR or no tags). No digest generated."
            echo "digest=" >> $GITHUB_OUTPUT
          fi

      - name: Install Cosign
        if: github.event_name != 'pull_request' && steps.build-and-push.outputs.digest != ''
        run: |
          # Install Cosign binary
          # Using sudo to install to /usr/local/bin for system-wide access
          # Alternatively, install to a directory in GITHUB_PATH for user-level access
          sudo curl -sL -o /usr/local/bin/cosign "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
          sudo chmod +x /usr/local/bin/cosign
          echo "Cosign version:"
          cosign version

      - name: Sign the published Docker image
        # Only sign if not a PR, and if a digest was successfully extracted (meaning image was pushed)
        if: github.event_name != 'pull_request' && steps.build-and-push.outputs.digest != ''
        env:
          # Enable OIDC-based keyless signing (EXPERIMENTAL is historical, now standard)
          COSIGN_EXPERIMENTAL: "true"
          # Space-separated list of image tags that were pushed
          IMAGE_TAGS_TO_SIGN: ${{ steps.meta.outputs.cosign_targets_string }}
          IMAGE_DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          echo "Image Digest to sign: ${IMAGE_DIGEST}"
          if [ -z "${IMAGE_TAGS_TO_SIGN}" ]; then
            echo "No image tags specified for signing. This might be an error in metadata generation."
            exit 1
          fi
          
          echo "The following image references (tag@digest) will be signed:"
          # Cosign signs the digest and can optionally associate this signature with tags.
          # Signing `image_tag@digest` ensures the signature is for that specific manifest digest
          # and the tag points to it at the time of signing.
          for img_tag_full_path in ${IMAGE_TAGS_TO_SIGN}; do
            echo "  - ${img_tag_full_path}@${IMAGE_DIGEST}"
            cosign sign --yes "${img_tag_full_path}@${IMAGE_DIGEST}"
          done
          echo "Successfully signed all targeted image references."
